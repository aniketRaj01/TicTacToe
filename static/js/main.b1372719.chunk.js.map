{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","i","this","squares","renderSquare","React","Component","Game","state","history","Array","fill","xIsNext","stepNumber","slice","length","calculateWinner","setState","concat","move","status","current","winner","moves","map","step","desc","jumpTo","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"8MAIA,SAASA,EAAOC,GACd,OACE,wBAAQC,UAAU,SAASC,QAASF,EAAME,QAA1C,SACGF,EAAMG,Q,IAKPC,E,2KACSC,GAAI,IAAD,OACd,OACE,cAACN,EAAD,CACEI,MAAOG,KAAKN,MAAMO,QAAQF,GAC1BH,QAAS,kBAAM,EAAKF,MAAME,QAAQG,Q,+BAStC,OACE,gCAEE,sBAAKJ,UAAU,YAAf,UACGK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,MAErB,sBAAKP,UAAU,YAAf,UACGK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,MAErB,sBAAKP,UAAU,YAAf,UACGK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,a,GA9BTC,IAAMC,WAqCpBC,E,kDAEJ,WAAYX,GAAO,IAAD,8BAChB,cAAMA,IACDY,MAAQ,CACXC,QAAU,CACR,CACEN,QAAUO,MAAM,GAAGC,KAAK,QAG5BC,SAAS,EACTC,WAAY,GATE,E,wDAcNZ,GACV,IAAMQ,EAAUP,KAAKM,MAAMC,QAAQK,MAAM,EAAGZ,KAAKM,MAAMK,WAAY,GAE7DV,EADUM,EAAQA,EAAQM,OAAQ,GAChBZ,QAAQW,QAC5BE,EAAgBb,IAAYA,EAAQF,KAGxCE,EAAQF,GAAKC,KAAKM,MAAMI,QAAU,IAAM,IACxCV,KAAKe,SAAS,CACZR,QAASA,EAAQS,OAAO,CAAC,CACvBf,QAASA,KAEXU,WAAWJ,EAAQM,OACnBH,SAAUV,KAAKM,MAAMI,a,6BAGpBO,GACJjB,KAAKe,SAAS,CACZJ,WAAaM,EACbP,QAASO,EAAK,IAAI,M,+BAGX,IACJC,EADG,OAEDX,EAAUP,KAAKM,MAAMC,QACrBY,EAAUZ,EAAQP,KAAKM,MAAMK,YAC7BS,EAASN,EAAgBK,EAAQlB,SAErCiB,EADCE,EACQA,EAAS,cAGRpB,KAAKM,MAAMI,QAAU,IAAK,KAAO,UAG7C,IAAMW,EAAQd,EAAQe,KAAI,SAACC,EAAKN,GAE9B,IAAMO,EAAMP,EAAO,sBAAwBA,EAAO,cAGlD,OAAGA,IAAO,EAAKX,MAAMK,YAAoB,GAANM,EAE/B,6BACE,wBAAQrB,QAAW,kBAAM,EAAK6B,OAAOR,IAArC,SACE,4BAAIO,OAFGP,GAST,6BACE,wBAAQrB,QAAW,kBAAM,EAAK6B,OAAOR,IAArC,SACGO,KAFMP,MASnB,OACE,sBAAKtB,UAAU,OAAf,UACE,qBAAKA,UAAU,aAAf,SACE,cAACG,EAAD,CAAOG,QAAUkB,EAAQlB,QAASL,QAAW,SAACG,GAAD,OAAK,EAAK2B,YAAY3B,QAErE,sBAAKJ,UAAU,YAAf,UACE,8BAAOuB,IACP,6BAAKG,c,GAlFIlB,IAAMC,WAgGzB,SAASU,EAAgBb,GAWvB,IAVA,IAAM0B,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEA5B,EAAI,EAAGA,EAAI4B,EAAMd,OAAQd,IAAK,CAAC,IAAD,cACnB4B,EAAM5B,GADa,GAC9B6B,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAErC,GAAI7B,EAAQ2B,IAAM3B,EAAQ2B,KAAO3B,EAAQ4B,IAAM5B,EAAQ2B,KAAO3B,EAAQ6B,GACpE,OAAO7B,EAAQ2B,GAGnB,OAAO,KAtBTG,IAASC,OACP,cAAC3B,EAAD,IACA4B,SAASC,eAAe,W","file":"static/js/main.b1372719.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nfunction Square(props) {\r\n  return (\r\n    <button className=\"square\" onClick={props.onClick}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n\r\nclass Board extends React.Component {\r\n  renderSquare(i) {\r\n    return (\r\n      <Square\r\n        value={this.props.squares[i]}\r\n        onClick={() => this.props.onClick(i)}\r\n      />\r\n    );\r\n  }\r\n  render() {\r\n    \r\n\r\n\r\n\r\n    return (\r\n      <div>\r\n \r\n        <div className=\"board-row\">\r\n          {this.renderSquare(0)}\r\n          {this.renderSquare(1)}\r\n          {this.renderSquare(2)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(3)}\r\n          {this.renderSquare(4)}\r\n          {this.renderSquare(5)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(6)}\r\n          {this.renderSquare(7)}\r\n          {this.renderSquare(8)}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Game extends React.Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      history : [\r\n        {\r\n          squares : Array(9).fill(null),\r\n        }\r\n      ],\r\n      xIsNext: true,\r\n      stepNumber: 0,\r\n    }\r\n  }\r\n  \r\n\r\n  handleClick(i){\r\n    const history = this.state.history.slice(0, this.state.stepNumber +1);\r\n    const current = history[history.length -1];\r\n    const squares = current.squares.slice();\r\n    if (calculateWinner(squares) || squares[i]) {\r\n      return;\r\n    }\r\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n    this.setState({\r\n      history: history.concat([{\r\n        squares: squares,\r\n      }]),\r\n      stepNumber:history.length,\r\n      xIsNext: !this.state.xIsNext,\r\n    });\r\n  }\r\njumpTo(move){\r\n   this.setState({\r\n     stepNumber : move,\r\n     xIsNext: move%2===0,\r\n   })\r\n}\r\n  render() {\r\n    var status;\r\n    const history = this.state.history;\r\n    const current = history[this.state.stepNumber];\r\n    const winner = calculateWinner(current.squares);\r\n    if(winner){\r\n      status = winner + \" is winner\";\r\n    }\r\n    else{\r\n      status = (this.state.xIsNext ? \"X\": \"O\") + \"'s turn\";\r\n    }\r\n\r\n    const moves = history.map((step,move)=> {\r\n      \r\n      const desc =move ? \"go to move number: \" + move : \"Start Again\";\r\n    \r\n\r\n      if(move===this.state.stepNumber && move!=0){\r\n        return (\r\n          <li key = {move}>\r\n            <button onClick = {() => this.jumpTo(move)}>\r\n              <b>{desc}</b>\r\n            </button>\r\n          </li>\r\n        )\r\n        }\r\n        else{\r\n          return (\r\n            <li key = {move}>\r\n              <button onClick = {() => this.jumpTo(move)}>\r\n                {desc}\r\n              </button>\r\n            </li>\r\n          )\r\n        }\r\n      \r\n    })\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board squares ={current.squares} onClick = {(i)=>this.handleClick(i)} />\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div>{ status }</div>\r\n          <ol>{moves}</ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n  <Game />,\r\n  document.getElementById('root')\r\n);\r\n\r\nfunction calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n  return null;\r\n}\r\n"],"sourceRoot":""}